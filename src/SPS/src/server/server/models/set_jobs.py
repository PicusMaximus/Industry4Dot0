from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server.server.models.base_model import Model
from server.server import util


class SetJobs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_id=None, name=None, next_job_id=None, next_device_ip=None):  # noqa: E501
        """SetJobs - a model defined in OpenAPI

        :param job_id: The job_id of this SetJobs.  # noqa: E501
        :type job_id: str
        :param name: The name of this SetJobs.  # noqa: E501
        :type name: str
        :param next_job_id: The next_job_id of this SetJobs.  # noqa: E501
        :type next_job_id: str
        :param next_device_ip: The next_device_ip of this SetJobs.  # noqa: E501
        :type next_device_ip: str
        """
        self.openapi_types = {
            'job_id': str,
            'name': str,
            'next_job_id': str,
            'next_device_ip': str
        }

        self.attribute_map = {
            'job_id': 'jobId',
            'name': 'name',
            'next_job_id': 'nextJobId',
            'next_device_ip': 'nextDeviceIp'
        }

        self._job_id = job_id
        self._name = name
        self._next_job_id = next_job_id
        self._next_device_ip = next_device_ip

    @classmethod
    def from_dict(cls, dikt) -> 'SetJobs':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The setJobs of this SetJobs.  # noqa: E501
        :rtype: SetJobs
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self) -> str:
        """Gets the job_id of this SetJobs.


        :return: The job_id of this SetJobs.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id: str):
        """Sets the job_id of this SetJobs.


        :param job_id: The job_id of this SetJobs.
        :type job_id: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")  # noqa: E501

        self._job_id = job_id

    @property
    def name(self) -> str:
        """Gets the name of this SetJobs.


        :return: The name of this SetJobs.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this SetJobs.


        :param name: The name of this SetJobs.
        :type name: str
        """

        self._name = name

    @property
    def next_job_id(self) -> str:
        """Gets the next_job_id of this SetJobs.


        :return: The next_job_id of this SetJobs.
        :rtype: str
        """
        return self._next_job_id

    @next_job_id.setter
    def next_job_id(self, next_job_id: str):
        """Sets the next_job_id of this SetJobs.


        :param next_job_id: The next_job_id of this SetJobs.
        :type next_job_id: str
        """
        if next_job_id is None:
            raise ValueError("Invalid value for `next_job_id`, must not be `None`")  # noqa: E501

        self._next_job_id = next_job_id

    @property
    def next_device_ip(self) -> str:
        """Gets the next_device_ip of this SetJobs.


        :return: The next_device_ip of this SetJobs.
        :rtype: str
        """
        return self._next_device_ip

    @next_device_ip.setter
    def next_device_ip(self, next_device_ip: str):
        """Sets the next_device_ip of this SetJobs.


        :param next_device_ip: The next_device_ip of this SetJobs.
        :type next_device_ip: str
        """
        if next_device_ip is None:
            raise ValueError("Invalid value for `next_device_ip`, must not be `None`")  # noqa: E501

        self._next_device_ip = next_device_ip
