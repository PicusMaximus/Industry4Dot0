from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server.server.models.base_model import Model
from server.server import util


class Login(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip=None, id=None, type=None, name=None):  # noqa: E501
        """Login - a model defined in OpenAPI

        :param ip: The ip of this Login.  # noqa: E501
        :type ip: str
        :param id: The id of this Login.  # noqa: E501
        :type id: str
        :param type: The type of this Login.  # noqa: E501
        :type type: str
        :param name: The name of this Login.  # noqa: E501
        :type name: str
        """
        self.openapi_types = {
            'ip': str,
            'id': str,
            'type': str,
            'name': str
        }

        self.attribute_map = {
            'ip': 'ip',
            'id': 'id',
            'type': 'type',
            'name': 'name'
        }

        self._ip = ip
        self._id = id
        self._type = type
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'Login':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Login of this Login.  # noqa: E501
        :rtype: Login
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip(self) -> str:
        """Gets the ip of this Login.


        :return: The ip of this Login.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip: str):
        """Sets the ip of this Login.


        :param ip: The ip of this Login.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def id(self) -> str:
        """Gets the id of this Login.


        :return: The id of this Login.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Login.


        :param id: The id of this Login.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self) -> str:
        """Gets the type of this Login.


        :return: The type of this Login.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Login.


        :param type: The type of this Login.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def name(self) -> str:
        """Gets the name of this Login.

        max. 20 Zeichen  # noqa: E501

        :return: The name of this Login.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Login.

        max. 20 Zeichen  # noqa: E501

        :param name: The name of this Login.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name
